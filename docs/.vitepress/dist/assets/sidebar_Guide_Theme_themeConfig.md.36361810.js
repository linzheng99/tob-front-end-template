import{_ as e,o as s,c as a,d as l}from"./app.bca2adcb.js";const u=JSON.parse('{"title":"主题设置","description":"","frontmatter":{},"headers":[{"level":2,"title":"NaiveUI","slug":"naiveui","link":"#naiveui","children":[]},{"level":2,"title":"ThemeConfig","slug":"themeconfig","link":"#themeconfig","children":[{"level":3,"title":"项目中layout文件夹内的组件样式均可配置","slug":"项目中layout文件夹内的组件样式均可配置","link":"#项目中layout文件夹内的组件样式均可配置","children":[]},{"level":3,"title":"主题颜色更改流程Color","slug":"主题颜色更改流程color","link":"#主题颜色更改流程color","children":[]}]}],"relativePath":"sidebar/Guide/Theme/themeConfig.md"}'),o={name:"sidebar/Guide/Theme/themeConfig.md"},n=l(`<h1 id="主题设置" tabindex="-1">主题设置 <a class="header-anchor" href="#主题设置" aria-hidden="true">#</a></h1><p><a href="https://www.naiveui.com/zh-CN/dark" target="_blank" rel="noreferrer">Naive UI</a></p><h2 id="naiveui" tabindex="-1">NaiveUI <a class="header-anchor" href="#naiveui" aria-hidden="true">#</a></h2><p>根据 <code>naive ui</code> 官网所说主题可调，只需要一个样式覆盖的对象即可</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- 详细内容跳转到App.vue文件 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">n-config-provider</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:theme-overrides</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">themeOverrides</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">app</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">n-config-provider</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">GlobalThemeOverrides</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">naive-ui</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> themeOverrides</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GlobalThemeOverrides</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span></code></pre></div><h2 id="themeconfig" tabindex="-1">ThemeConfig <a class="header-anchor" href="#themeconfig" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>本身 naive ui 的样式就是可配置，所性把项目中均可配置项提取到同一个文件内 <code>/src/theme/theme.ts</code></p></div><h3 id="项目中layout文件夹内的组件样式均可配置" tabindex="-1">项目中<code>layout文件夹</code>内的组件样式均可配置 <a class="header-anchor" href="#项目中layout文件夹内的组件样式均可配置" aria-hidden="true">#</a></h3><ul><li>Header的高</li><li>sidebar的宽</li><li>tab的高宽</li><li>...</li></ul><h3 id="主题颜色更改流程color" tabindex="-1">主题颜色更改流程<code>Color</code> <a class="header-anchor" href="#主题颜色更改流程color" aria-hidden="true">#</a></h3><p>对于 color 存储的初步思想 <code>设置默认 -&gt; 修改 -&gt; 监听</code></p><p>对于 color 其实分2个 1.<code>themeColor</code> 2. <code>Naive UI Color</code></p><ol><li>设置 default color 并存在本地（localStorage）</li><li>修改 color</li><li>监听 color 更改，替换本地</li><li>关闭页面时替换修改后的数据（ui样式、布局样式）</li></ol><p>使用 pinia 对数据的存储和获取 <code>/src/store/modules/theme.ts</code></p><p>主要的方法实现<code>/src/utils/helper/themeHelper.ts</code></p><p>通过全局的监听模式对数据<code>/src/store/subscribe/theme.ts</code></p><p>监听页面关闭<code>/src/utils/cache/events.ts</code></p>`,18),t=[n];function c(p,r,i,d,h,y){return s(),a("div",null,t)}const F=e(o,[["render",c]]);export{u as __pageData,F as default};
